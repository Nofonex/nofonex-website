generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id            String    @id
  content       String
  postSlug      String
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  parentId      String?
  status        String    @default("pending")
  Comment       Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  other_Comment Comment[] @relation("CommentToComment")
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Like          Like[]
  Report        Report[]

  @@index([postSlug])
}

model Like {
  id        String   @id
  commentId String
  userId    String
  createdAt DateTime @default(now())
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model Report {
  id        String   @id
  reason    String
  commentId String
  userId    String
  createdAt DateTime @default(now())
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String    @default("user")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  Account        Account[]
  Comment        Comment[]
  Like           Like[]
  Report         Report[]
  Session        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
